{"ast":null,"code":"var _jsxFileName = \"D:\\\\UI-Workspace\\\\google-map-react-app\\\\src\\\\components\\\\pages\\\\TestFormValidation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\nimport AuthService from \"../../services/auth.service\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestFormValidation = () => {\n  _s();\n  var _errors$email, _errors$password;\n  const validationSchema = Yup.object().shape({\n    // email: Yup.string().required('Fullname is required'),\n    // password: Yup.string()\n    //   .required('Username is required')\n    //   .min(6, 'Username must be at least 6 characters')\n    //   .max(20, 'Username must not exceed 20 characters'),\n    email: Yup.string().required('Email is required').email('Email is invalid'),\n    password: Yup.string().required('Password is required').min(6, 'Password must be at least 6 characters').max(40, 'Password must not exceed 40 characters')\n    // confirmPassword: Yup.string()\n    //   .required('Confirm Password is required')\n    //   .oneOf([Yup.ref('password'), null], 'Confirm Password does not match'),\n    // acceptTerms: Yup.bool().oneOf([true], 'Accept Terms is required')\n  });\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n  const onSubmit = data => {\n    console.log(JSON.stringify(data, null, 2));\n  };\n  let navigate = useNavigate();\n  const form = useRef();\n  const checkBtn = useRef();\n  const [email, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const onChangeUsername = e => {\n    const email = e.target.value;\n    setUsername(email);\n  };\n  const onChangePassword = e => {\n    const password = e.target.value;\n    setPassword(password);\n  };\n  const handleLogin = e => {\n    e.preventDefault();\n    setMessage(\"\");\n    setLoading(true);\n\n    // form.current.validateAll();\n\n    AuthService.login(email, password).then(() => {\n      navigate(\"/profile\");\n      window.location.reload();\n    }, error => {\n      const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n      setLoading(false);\n      setMessage(resMessage);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col-md-12\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card card-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"//ssl.gstatic.com/accounts/ui/avatar_2x.png\",\n        alt: \"profile-img\",\n        className: \"profile-img-card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleLogin,\n        ref: form,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"email\",\n            ...register('email'),\n            className: `form-control ${errors.email ? 'is-invalid' : ''}`,\n            value: email,\n            onChange: onChangeUsername\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"invalid-feedback\",\n            children: (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            name: \"password\",\n            ...register('password'),\n            className: `form-control ${errors.password ? 'is-invalid' : ''}`,\n            value: password,\n            onChange: onChangePassword\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"invalid-feedback\",\n            children: (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary btn-block\",\n            disabled: loading,\n            children: [loading && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"spinner-border spinner-border-sm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"alert alert-danger\",\n            role: \"alert\",\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            display: \"none\"\n          },\n          ref: checkBtn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/forgetpassword\",\n        className: \"nav-link text-center\",\n        children: \"Forget Password?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(TestFormValidation, \"vsr+HOf3UsLclFou56fAGRTd8o4=\", false, function () {\n  return [useForm, useNavigate];\n});\n_c = TestFormValidation;\nexport default TestFormValidation;\nvar _c;\n$RefreshReg$(_c, \"TestFormValidation\");","map":{"version":3,"names":["React","useState","useRef","Link","useNavigate","useForm","yupResolver","Yup","AuthService","TestFormValidation","validationSchema","object","shape","email","string","required","password","min","max","register","handleSubmit","reset","formState","errors","resolver","onSubmit","data","console","log","JSON","stringify","navigate","form","checkBtn","setUsername","setPassword","loading","setLoading","message","setMessage","onChangeUsername","e","target","value","onChangePassword","handleLogin","preventDefault","login","then","window","location","reload","error","resMessage","response","toString","display"],"sources":["D:/UI-Workspace/google-map-react-app/src/components/pages/TestFormValidation.jsx"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from 'yup';\r\n\r\nimport AuthService from \"../../services/auth.service\";\r\n\r\nconst TestFormValidation = () => {\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        // email: Yup.string().required('Fullname is required'),\r\n        // password: Yup.string()\r\n        //   .required('Username is required')\r\n        //   .min(6, 'Username must be at least 6 characters')\r\n        //   .max(20, 'Username must not exceed 20 characters'),\r\n        email: Yup.string()\r\n          .required('Email is required')\r\n          .email('Email is invalid'),\r\n        password: Yup.string()\r\n          .required('Password is required')\r\n          .min(6, 'Password must be at least 6 characters')\r\n          .max(40, 'Password must not exceed 40 characters'),\r\n        // confirmPassword: Yup.string()\r\n        //   .required('Confirm Password is required')\r\n        //   .oneOf([Yup.ref('password'), null], 'Confirm Password does not match'),\r\n        // acceptTerms: Yup.bool().oneOf([true], 'Accept Terms is required')\r\n      });\r\n\r\n      const {\r\n        register,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { errors }\r\n      } = useForm({\r\n        resolver: yupResolver(validationSchema)\r\n      });\r\n\r\n\r\n      const onSubmit = data => {\r\n        console.log(JSON.stringify(data, null, 2));\r\n      };\r\n\r\n  let navigate = useNavigate();\r\n\r\n  const form = useRef();\r\n  const checkBtn = useRef();\r\n\r\n  const [email, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const onChangeUsername = (e) => {\r\n    const email = e.target.value;\r\n    setUsername(email);\r\n  };\r\n\r\n  const onChangePassword = (e) => {\r\n    const password = e.target.value;\r\n    setPassword(password);\r\n  };\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n\r\n    setMessage(\"\");\r\n    setLoading(true);\r\n\r\n    // form.current.validateAll();\r\n\r\n   \r\n      AuthService.login(email, password).then(\r\n        () => {\r\n          navigate(\"/profile\");\r\n          window.location.reload();\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n\r\n          setLoading(false);\r\n          setMessage( resMessage);\r\n        }\r\n      );\r\n  };\r\n\r\n  return (\r\n    <div className=\"col-md-12\">\r\n      <div className=\"card card-container\">\r\n        <img\r\n          src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n          alt=\"profile-img\"\r\n          className=\"profile-img-card\"\r\n        />\r\n\r\n        <form onSubmit={handleLogin} ref={form}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"email\">Email Address</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"email\"\r\n              {...register('email')}\r\n              className={`form-control ${errors.email ? 'is-invalid' : ''}`}\r\n              value={email}\r\n              onChange={onChangeUsername}\r\n            />\r\n            <div className=\"invalid-feedback\">{errors.email?.message}</div>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input\r\n              type=\"password\"            \r\n              name=\"password\"\r\n              {...register('password')}\r\n              className={`form-control ${errors.password ? 'is-invalid' : ''}`}\r\n              value={password}\r\n              onChange={onChangePassword}\r\n            />\r\n             <div className=\"invalid-feedback\">{errors.password?.message}</div>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <button className=\"btn btn-primary btn-block\" disabled={loading}>\r\n              {loading && (\r\n                <span className=\"spinner-border spinner-border-sm\"></span>\r\n              )}\r\n              <span>Login</span>\r\n            </button>\r\n          </div>\r\n\r\n          {message && (\r\n            <div className=\"form-group\">\r\n              <div className=\"alert alert-danger\" role=\"alert\">\r\n                {message}\r\n              </div>\r\n            </div>\r\n          )}\r\n          <button style={{ display: \"none\" }} ref={checkBtn} />\r\n        </form>\r\n        <Link to={\"/forgetpassword\"} className=\"nav-link text-center\">\r\n        Forget Password?\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TestFormValidation;"],"mappings":"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"},"metadata":{},"sourceType":"module"}